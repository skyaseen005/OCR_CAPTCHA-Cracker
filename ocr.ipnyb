OCR model for reading Captchas
This is a simple OCR model built with the Functional API. Apart from combining CNN and RNN, it also illustrates how you can instantiate a new layer and use it as an "Endpoint layer" for implementing CTC loss.

import os
import numpy as np
import matplotlib.pyplot as plt

from pathlib import Path
from collections import Counter

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
The dataset contains 1040 captcha files as png images. The label for each sample is a string, the name of the file (minus the file extension). We will map each character in the string to an integer for training the model. Similary, we will need to map the predictions of the model back to strings. For this purpose we will maintain two dictionaries, mapping characters to integers, and integers to characters, respectively.

# Path to the data directory
data_dir = Path("./captcha_images_v2/")

# Get list of all the images
images = sorted(list(map(str, list(data_dir.glob("*.png")))))
labels = [img.split(os.path.sep)[-1].split(".png")[0] for img in images]
characters = set(char for label in labels for char in label)

print("Number of images found: ", len(images))
print("Number of labels found: ", len(labels))
print("Number of unique characters: ", len(characters))
print("Characters present: ", characters)

# Batch size for training and validation
batch_size = 16

# Desired image dimensions
img_width = 200
img_height = 50

# Factor by which the image is going to be downsampled
# by the convolutional blocks. We will be using two
# convolution blocks and each block will have
# a pooling layer which downsample the features by a factor of 2.
# Hence total downsampling factor would be 4.
downsample_factor = 4

# Maximum length of any captcha in the dataset
max_length = max([len(label) for label in labels])
Number of images found:  1040
Number of labels found:  1040
Number of unique characters:  19
Characters present:  {'y', '8', 'n', '5', '2', 'e', 'c', 'g', 'm', 'w', 'p', '3', '7', 'x', 'b', '4', 'f', 'd', '6'}
Preprocessing
# Mapping characters to integers 
# Stringlookup - Maps strings from a vocabulary to integer indices.
char_to_num = layers.experimental.preprocessing.StringLookup(
    vocabulary=list(characters), num_oov_indices=0, mask_token=None
)

# Mapping integers back to original characters
num_to_char = layers.experimental.preprocessing.StringLookup(
    vocabulary=char_to_num.get_vocabulary(), mask_token=None, invert=True
)


def split_data(images, labels, train_size=0.9, shuffle=True):
    # 1. Get the total size of the dataset
    size = len(images)
    # 2. Make an indices array and shuffle it, if required
    indices = np.arange(size)
    if shuffle:
        np.random.shuffle(indices)
    # 3. Get the size of training samples
    train_samples = int(size * train_size)
    # 4. Split data into training and validation sets
    x_train, y_train = images[indices[:train_samples]], labels[indices[:train_samples]]
    x_valid, y_valid = images[indices[train_samples:]], labels[indices[train_samples:]]
    return x_train, x_valid, y_train, y_valid


# Splitting data into training and validation sets
x_train, x_valid, y_train, y_valid = split_data(np.array(images), np.array(labels))


def encode_single_sample(img_path, label):
    # 1. Read image
    img = tf.io.read_file(img_path)
    # 2. Decode and convert to grayscale
    img = tf.io.decode_png(img, channels=1)
    # 3. Convert to float32 in [0, 1] range
    img = tf.image.convert_image_dtype(img, tf.float32)
    # 4. Resize to the desired size
    img = tf.image.resize(img, [img_height, img_width])
    # 5. Transpose the image because we want the time
    # dimension to correspond to the width of the image.
    img = tf.transpose(img, perm=[1, 0, 2])
    # 6. Map the characters in label to numbers
    label = char_to_num(tf.strings.unicode_split(label, input_encoding="UTF-8"))
    # 7. Return a dict as our model is expecting two inputs
    return {"image": img, "label": label}
Create Dataset objects
train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))
train_dataset = (
    train_dataset.map(
        encode_single_sample, num_parallel_calls=tf.data.experimental.AUTOTUNE
    )
    .batch(batch_size)
    .prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
)

validation_dataset = tf.data.Dataset.from_tensor_slices((x_valid, y_valid))
validation_dataset = (
    validation_dataset.map(
        encode_single_sample, num_parallel_calls=tf.data.experimental.AUTOTUNE
    )
    .batch(batch_size)
    .prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
)
Visualize the data
_, ax = plt.subplots(4, 4, figsize=(10, 5))
for batch in train_dataset.take(1):
    images = batch["image"]
    labels = batch["label"]
    for i in range(16):
        img = (images[i] * 255).numpy().astype("uint8")
        label = tf.strings.reduce_join(num_to_char(labels[i])).numpy().decode("utf-8")
        ax[i // 4, i % 4].imshow(img[:, :, 0].T, cmap="gray")
        ax[i // 4, i % 4].set_title(label)
        ax[i // 4, i % 4].axis("off")
plt.show()

Model
#Connection Temporal Classification layer
class CTCLayer(layers.Layer):
    def __init__(self, name=None):
        super().__init__(name=name)
        self.loss_fn = keras.backend.ctc_batch_cost

    def call(self, y_true, y_pred):
        # Compute the training-time loss value and add it
        # to the layer using `self.add_loss()`.
        batch_len = tf.cast(tf.shape(y_true)[0], dtype="int64")
        input_length = tf.cast(tf.shape(y_pred)[1], dtype="int64")
        label_length = tf.cast(tf.shape(y_true)[1], dtype="int64")

        input_length = input_length * tf.ones(shape=(batch_len, 1), dtype="int64")
        label_length = label_length * tf.ones(shape=(batch_len, 1), dtype="int64")

        loss = self.loss_fn(y_true, y_pred, input_length, label_length)
        self.add_loss(loss)

        # At test time, just return the computed predictions
        return y_pred


def build_model():
    # Inputs to the model
    input_img = layers.Input(
        shape=(img_width, img_height, 1), name="image", dtype="float32"
    )
    labels = layers.Input(name="label", shape=(None,), dtype="float32")

    # First conv block
    x = layers.Conv2D(
        32,
        (3, 3),
        activation="relu",
        kernel_initializer="he_normal",
        padding="same",
        name="Conv1",
    )(input_img)
    x = layers.MaxPooling2D((2, 2), name="pool1")(x)

    # Second conv block
    x = layers.Conv2D(
        64,
        (3, 3),
        activation="relu",
        kernel_initializer="he_normal",
        padding="same",
        name="Conv2",
    )(x)
    x = layers.MaxPooling2D((2, 2), name="pool2")(x)

    # We have used two max pool with pool size and strides 2.
    # Hence, downsampled feature maps are 4x smaller. The number of
    # filters in the last layer is 64. Reshape accordingly before
    # passing the output to the RNN part of the model
    new_shape = ((img_width // 4), (img_height // 4) * 64)
    x = layers.Reshape(target_shape=new_shape, name="reshape")(x)
    x = layers.Dense(64, activation="relu", name="dense1")(x)
    x = layers.Dropout(0.2)(x)

    # RNNs
    x = layers.Bidirectional(layers.LSTM(128, return_sequences=True, dropout=0.25))(x)
    x = layers.Bidirectional(layers.LSTM(64, return_sequences=True, dropout=0.25))(x)

    # Output layer
    x = layers.Dense(len(characters) + 1, activation="softmax", name="dense2")(x)

    # Add CTC layer for calculating CTC loss at each step
    output = CTCLayer(name="ctc_loss")(labels, x)

    # Define the model
    model = keras.models.Model(
        inputs=[input_img, labels], outputs=output, name="ocr_model_v1"
    )
    # Optimizer
    opt = keras.optimizers.Adam()
    # Compile the model and return
    model.compile(optimizer=opt)
    return model


# Get the model
model = build_model()
model.summary()
Model: "ocr_model_v1"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
image (InputLayer)              [(None, 200, 50, 1)] 0                                            
__________________________________________________________________________________________________
Conv1 (Conv2D)                  (None, 200, 50, 32)  320         image[0][0]                      
__________________________________________________________________________________________________
pool1 (MaxPooling2D)            (None, 100, 25, 32)  0           Conv1[0][0]                      
__________________________________________________________________________________________________
Conv2 (Conv2D)                  (None, 100, 25, 64)  18496       pool1[0][0]                      
__________________________________________________________________________________________________
pool2 (MaxPooling2D)            (None, 50, 12, 64)   0           Conv2[0][0]                      
__________________________________________________________________________________________________
reshape (Reshape)               (None, 50, 768)      0           pool2[0][0]                      
__________________________________________________________________________________________________
dense1 (Dense)                  (None, 50, 64)       49216       reshape[0][0]                    
__________________________________________________________________________________________________
dropout (Dropout)               (None, 50, 64)       0           dense1[0][0]                     
__________________________________________________________________________________________________
bidirectional (Bidirectional)   (None, 50, 256)      197632      dropout[0][0]                    
__________________________________________________________________________________________________
bidirectional_1 (Bidirectional) (None, 50, 128)      164352      bidirectional[0][0]              
__________________________________________________________________________________________________
label (InputLayer)              [(None, None)]       0                                            
__________________________________________________________________________________________________
dense2 (Dense)                  (None, 50, 20)       2580        bidirectional_1[0][0]            
__________________________________________________________________________________________________
ctc_loss (CTCLayer)             (None, 50, 20)       0           label[0][0]                      
                                                                 dense2[0][0]                     
==================================================================================================
Total params: 432,596
Trainable params: 432,596
Non-trainable params: 0
__________________________________________________________________________________________________
Training
epochs = 100
early_stopping_patience = 10
# Add early stopping
early_stopping = keras.callbacks.EarlyStopping(
    monitor="val_loss", patience=early_stopping_patience, restore_best_weights=True
)

# Train the model
history = model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=epochs,
    callbacks=[early_stopping],
)
Epoch 1/100
59/59 [==============================] - 7s 111ms/step - loss: 20.3293 - val_loss: 16.3926
Epoch 2/100
59/59 [==============================] - 5s 80ms/step - loss: 16.3258 - val_loss: 16.4125
Epoch 3/100
59/59 [==============================] - 5s 80ms/step - loss: 16.3276 - val_loss: 16.4041
Epoch 4/100
59/59 [==============================] - 5s 80ms/step - loss: 16.3214 - val_loss: 16.4167
Epoch 5/100
59/59 [==============================] - 5s 81ms/step - loss: 16.3156 - val_loss: 16.4202
Epoch 6/100
59/59 [==============================] - 5s 79ms/step - loss: 16.3123 - val_loss: 16.4164
Epoch 7/100
59/59 [==============================] - 5s 81ms/step - loss: 16.3072 - val_loss: 16.4460
Epoch 8/100
59/59 [==============================] - 5s 80ms/step - loss: 16.2951 - val_loss: 16.4190
Epoch 9/100
59/59 [==============================] - 5s 80ms/step - loss: 16.2704 - val_loss: 16.3660
Epoch 10/100
59/59 [==============================] - 5s 80ms/step - loss: 16.2353 - val_loss: 16.2778
Epoch 11/100
59/59 [==============================] - 5s 81ms/step - loss: 16.1715 - val_loss: 16.3510
Epoch 12/100
59/59 [==============================] - 5s 80ms/step - loss: 16.0737 - val_loss: 15.9047
Epoch 13/100
59/59 [==============================] - 5s 80ms/step - loss: 15.9277 - val_loss: 15.7568
Epoch 14/100
59/59 [==============================] - 5s 80ms/step - loss: 15.7710 - val_loss: 15.6074
Epoch 15/100
59/59 [==============================] - 5s 81ms/step - loss: 15.6793 - val_loss: 15.5643
Epoch 16/100
59/59 [==============================] - 5s 80ms/step - loss: 15.6162 - val_loss: 15.5331
Epoch 17/100
59/59 [==============================] - 5s 80ms/step - loss: 15.5873 - val_loss: 15.5014
Epoch 18/100
59/59 [==============================] - 5s 80ms/step - loss: 15.5200 - val_loss: 15.3950
Epoch 19/100
59/59 [==============================] - 5s 81ms/step - loss: 15.2795 - val_loss: 14.9011
Epoch 20/100
59/59 [==============================] - 5s 80ms/step - loss: 14.9368 - val_loss: 14.6217
Epoch 21/100
59/59 [==============================] - 5s 80ms/step - loss: 14.6974 - val_loss: 14.4025
Epoch 22/100
59/59 [==============================] - 5s 80ms/step - loss: 14.5828 - val_loss: 14.2951
Epoch 23/100
59/59 [==============================] - 5s 82ms/step - loss: 14.4620 - val_loss: 14.2207
Epoch 24/100
59/59 [==============================] - 5s 80ms/step - loss: 14.2332 - val_loss: 13.8924
Epoch 25/100
59/59 [==============================] - 5s 80ms/step - loss: 13.9769 - val_loss: 13.6223
Epoch 26/100
59/59 [==============================] - 5s 81ms/step - loss: 13.7202 - val_loss: 13.4769
Epoch 27/100
59/59 [==============================] - 5s 80ms/step - loss: 13.4966 - val_loss: 13.1927
Epoch 28/100
59/59 [==============================] - 5s 80ms/step - loss: 13.2027 - val_loss: 12.7455
Epoch 29/100
59/59 [==============================] - 5s 81ms/step - loss: 12.7131 - val_loss: 12.4703
Epoch 30/100
59/59 [==============================] - 5s 82ms/step - loss: 12.1405 - val_loss: 11.6250
Epoch 31/100
59/59 [==============================] - 5s 82ms/step - loss: 11.1760 - val_loss: 9.7791
Epoch 32/100
59/59 [==============================] - 5s 80ms/step - loss: 9.7013 - val_loss: 8.5127
Epoch 33/100
59/59 [==============================] - 5s 80ms/step - loss: 8.1734 - val_loss: 6.6541
Epoch 34/100
59/59 [==============================] - 5s 81ms/step - loss: 6.6494 - val_loss: 5.0867
Epoch 35/100
59/59 [==============================] - 5s 80ms/step - loss: 5.1949 - val_loss: 3.7369
Epoch 36/100
59/59 [==============================] - 5s 81ms/step - loss: 4.3842 - val_loss: 3.2859
Epoch 37/100
59/59 [==============================] - 5s 80ms/step - loss: 3.4663 - val_loss: 2.7537
Epoch 38/100
59/59 [==============================] - 5s 81ms/step - loss: 2.9126 - val_loss: 2.5679
Epoch 39/100
59/59 [==============================] - 5s 80ms/step - loss: 2.4809 - val_loss: 1.6471
Epoch 40/100
59/59 [==============================] - 5s 79ms/step - loss: 1.9604 - val_loss: 1.3597
Epoch 41/100
59/59 [==============================] - 5s 81ms/step - loss: 1.6530 - val_loss: 1.0611
Epoch 42/100
59/59 [==============================] - 5s 80ms/step - loss: 1.4531 - val_loss: 0.9799
Epoch 43/100
59/59 [==============================] - 5s 80ms/step - loss: 1.2599 - val_loss: 0.8492
Epoch 44/100
59/59 [==============================] - 5s 80ms/step - loss: 1.0634 - val_loss: 0.7859
Epoch 45/100
59/59 [==============================] - 5s 79ms/step - loss: 0.8756 - val_loss: 0.8038
Epoch 46/100
59/59 [==============================] - 5s 80ms/step - loss: 0.8904 - val_loss: 0.5801
Epoch 47/100
59/59 [==============================] - 5s 80ms/step - loss: 0.7778 - val_loss: 0.5056
Epoch 48/100
59/59 [==============================] - 5s 79ms/step - loss: 0.7507 - val_loss: 0.7437
Epoch 49/100
59/59 [==============================] - 5s 80ms/step - loss: 0.6680 - val_loss: 0.4874
Epoch 50/100
59/59 [==============================] - 5s 80ms/step - loss: 0.5299 - val_loss: 0.5091
Epoch 51/100
59/59 [==============================] - 5s 80ms/step - loss: 0.6399 - val_loss: 0.4216
Epoch 52/100
59/59 [==============================] - 5s 79ms/step - loss: 0.5681 - val_loss: 0.3815
Epoch 53/100
59/59 [==============================] - 5s 80ms/step - loss: 0.4221 - val_loss: 0.2958
Epoch 54/100
59/59 [==============================] - 5s 79ms/step - loss: 0.4169 - val_loss: 0.3333
Epoch 55/100
59/59 [==============================] - 5s 79ms/step - loss: 0.4010 - val_loss: 0.3169
Epoch 56/100
59/59 [==============================] - 5s 79ms/step - loss: 0.4149 - val_loss: 0.2898
Epoch 57/100
59/59 [==============================] - 5s 80ms/step - loss: 0.3376 - val_loss: 0.2426
Epoch 58/100
59/59 [==============================] - 5s 80ms/step - loss: 0.3251 - val_loss: 0.2259
Epoch 59/100
59/59 [==============================] - 5s 80ms/step - loss: 0.2897 - val_loss: 0.2107
Epoch 60/100
59/59 [==============================] - 5s 80ms/step - loss: 0.2965 - val_loss: 0.1685
Epoch 61/100
59/59 [==============================] - 5s 80ms/step - loss: 0.2551 - val_loss: 0.2209
Epoch 62/100
59/59 [==============================] - 5s 79ms/step - loss: 0.2984 - val_loss: 0.2893
Epoch 63/100
59/59 [==============================] - 5s 79ms/step - loss: 0.2387 - val_loss: 0.1886
Epoch 64/100
59/59 [==============================] - 5s 80ms/step - loss: 0.2080 - val_loss: 0.1783
Epoch 65/100
59/59 [==============================] - 5s 79ms/step - loss: 0.2821 - val_loss: 0.3306
Epoch 66/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1779 - val_loss: 0.1674
Epoch 67/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1779 - val_loss: 0.1627
Epoch 68/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1992 - val_loss: 0.2400
Epoch 69/100
59/59 [==============================] - 5s 79ms/step - loss: 0.2252 - val_loss: 0.1533
Epoch 70/100
59/59 [==============================] - 5s 79ms/step - loss: 0.2037 - val_loss: 0.2248
Epoch 71/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1656 - val_loss: 0.1194
Epoch 72/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1979 - val_loss: 0.1667
Epoch 73/100
59/59 [==============================] - 5s 79ms/step - loss: 0.3763 - val_loss: 0.1385
Epoch 74/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1786 - val_loss: 0.1473
Epoch 75/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1093 - val_loss: 0.1554
Epoch 76/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1341 - val_loss: 0.1065
Epoch 77/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1264 - val_loss: 0.1399
Epoch 78/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1237 - val_loss: 0.1098
Epoch 79/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1546 - val_loss: 0.1517
Epoch 80/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1390 - val_loss: 0.1305
Epoch 81/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1303 - val_loss: 0.1159
Epoch 82/100
59/59 [==============================] - 5s 79ms/step - loss: 0.0934 - val_loss: 0.0805
Epoch 83/100
59/59 [==============================] - 5s 79ms/step - loss: 0.0829 - val_loss: 0.0939
Epoch 84/100
59/59 [==============================] - 5s 79ms/step - loss: 0.0842 - val_loss: 0.1282
Epoch 85/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1075 - val_loss: 0.0794
Epoch 86/100
59/59 [==============================] - 5s 81ms/step - loss: 0.0866 - val_loss: 0.0579
Epoch 87/100
59/59 [==============================] - 5s 80ms/step - loss: 0.0821 - val_loss: 0.0451
Epoch 88/100
59/59 [==============================] - 5s 79ms/step - loss: 0.0780 - val_loss: 0.1682
Epoch 89/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1608 - val_loss: 0.1209
Epoch 90/100
59/59 [==============================] - 5s 80ms/step - loss: 0.1323 - val_loss: 0.0682
Epoch 91/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1648 - val_loss: 0.0946
Epoch 92/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1306 - val_loss: 0.1402
Epoch 93/100
59/59 [==============================] - 5s 79ms/step - loss: 0.1527 - val_loss: 0.0717
Epoch 94/100
59/59 [==============================] - 5s 81ms/step - loss: 0.1138 - val_loss: 0.1447
Epoch 95/100
59/59 [==============================] - 5s 83ms/step - loss: 0.0765 - val_loss: 0.0821
Epoch 96/100
59/59 [==============================] - 5s 80ms/step - loss: 0.0653 - val_loss: 0.0515
Epoch 97/100
59/59 [==============================] - 5s 79ms/step - loss: 0.0725 - val_loss: 0.1560
Inference
# Get the prediction model by extracting layers till the output layer
prediction_model = keras.models.Model(
    model.get_layer(name="image").input, model.get_layer(name="dense2").output
)
prediction_model.summary()

# A utility function to decode the output of the network
def decode_batch_predictions(pred):
    input_len = np.ones(pred.shape[0]) * pred.shape[1]
    # Use greedy search. For complex tasks, you can use beam search
    results = keras.backend.ctc_decode(pred, input_length=input_len, greedy=True)[0][0][
        :, :max_length
    ]
    # Iterate over the results and get back the text
    output_text = []
    for res in results:
        res = tf.strings.reduce_join(num_to_char(res)).numpy().decode("utf-8")
        output_text.append(res)
    return output_text


#  Let's check results on some validation samples
for batch in validation_dataset.take(1):
    batch_images = batch["image"]
    batch_labels = batch["label"]

    preds = prediction_model.predict(batch_images)
    pred_texts = decode_batch_predictions(preds)

    orig_texts = []
    for label in batch_labels:
        label = tf.strings.reduce_join(num_to_char(label)).numpy().decode("utf-8")
        orig_texts.append(label)

    _, ax = plt.subplots(4, 4, figsize=(15, 5))
    for i in range(len(pred_texts)):
        img = (batch_images[i, :, :, 0] * 255).numpy().astype(np.uint8)
        img = img.T
        title = f"Prediction: {pred_texts[i]}"
        ax[i // 4, i % 4].imshow(img, cmap="gray")
        ax[i // 4, i % 4].set_title(title)
        ax[i // 4, i % 4].axis("off")
plt.show()
Model: "functional_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
image (InputLayer)           [(None, 200, 50, 1)]      0         
_________________________________________________________________
Conv1 (Conv2D)               (None, 200, 50, 32)       320       
_________________________________________________________________
pool1 (MaxPooling2D)         (None, 100, 25, 32)       0         
_________________________________________________________________
Conv2 (Conv2D)               (None, 100, 25, 64)       18496     
_________________________________________________________________
pool2 (MaxPooling2D)         (None, 50, 12, 64)        0         
_________________________________________________________________
reshape (Reshape)            (None, 50, 768)           0         
_________________________________________________________________
dense1 (Dense)               (None, 50, 64)            49216     
_________________________________________________________________
dropout (Dropout)            (None, 50, 64)            0         
_________________________________________________________________
bidirectional (Bidirectional (None, 50, 256)           197632    
_________________________________________________________________
bidirectional_1 (Bidirection (None, 50, 128)           164352    
_________________________________________________________________
dense2 (Dense)               (None, 50, 20)            2580      
=================================================================
Total params: 432,596
Trainable params: 432,596
Non-trainable params: 0
_________________________________________________________________
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Create a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.
